# 정규방정식
# np.randon.rand(m, n) : 0~1 사이의 균일분포에서 mxn matrix array 생성
# np.random.randn(m, n) : 평균 0, 표준편차 1의 가우시안 표준정규분포에서  mxn matrix array 생성

import numpy as np

X = 2 * np.random.rand(100, 1)
y = 4 + 3 * X + np.random.randn(100, 1)


# 정규방정식 사용하여 theta hat을 계산
# np.linalg.inv() 를 사용하여 역행렬 inverse 를 계산하고, dot() 을 사용하여 행렬 곱셈
# .T 를 통해 Transpose 계산

# 모든 샘플에 x0=1을 추가한다
X_b = np.c_[np.ones((100,1)), X]
theta_best = np.linalg.inv(X_b.T.dot(X_b)).dot(X_b.T).dot(y)


# 계산한 값 확인
# 사용한 함수 y = 4 + 3X_1 + 가우시안_잡음

theta_best

# theta0 = 3.669, theta1 = 3.126 대신, theta0=4, theta=3을 기대했다


# theta_hat을 사용하여 예측

X_new = np.array([[0], [2]])
X_new_b = np.c_[np.ones((2, 1)), X_new]
y_predict = X_new_b.dot(theta_best)
y_predict


# 모델의 예측을 그래프에 나타낸다

import matplotlib.pyplot as plt 
plt.plot(X_new, y_predict, "r-")
plt.plot(X, y, "b.")
plt.axis([0, 2, 0, 15])
plt.show()


# 사이킷 런에서 선형 회귀 수행

from sklearn.linear_model import LinearRegression

lin_reg = LinearRegression()
lin_reg.fit(X, y)
lin_reg.intercept_, lin_reg.coef_

# 사이킷 런은 특성의 가중치 (coef_) 와 편향 (intercept_) 을 따로 저장

lin_reg.predict(X_new)


# scipy.linalg.lstsq() 함수를 기반으로 한다

theta_best_svd, residuals, rank, s = np.linalg.lstsq(X_b, y, rcond=1e-6)
theta_best_svd


# 유사역행렬 pseudoinverse (X'X)^-1 X'

np.linalg.pinv(X_b).dot(y)

# 특잇값 분해 singular value decomposition (SVD) 기법 사용


# 경사 하강법 Gradient Descent (GD)
# 비용 함수를 최소화하기 위해 반복해서 파라미터를 조정해가는 것

# 위로 향하는 gradient vector가 구해지면 반대 방향인 아래로 가야한다 - 학습률 사용

eta = 0.1 #학습률
n_iterations = 1000
m = 100

theta = np.random.randn(2, 1) # 무작위 초기화

for iteration in range(n_iterations):
    gradients = 2/m * X_b.T.dot(X_b.dot(theta) - y)
    theta = theta - eta * gradients
    
theta

# 정규 방정식으로 찾은 theta_0 (편향) 와 theta_1 (가중치) 과 같음


# 4.2.2 확률적 경사 하강법 Stochastic Gradient Descent
# 매 스텝에서 한 개의 샘플을 무작위로 선택하고, 그 하나의 샘플에 대한 gradient를 계산
# 불안정, 지역 최솟값에서 탈출시켜줘서 좋지만, 알고리즘을 전역 최솟값에 다다르지 못하게 한다.
# 확률을 점진적으로 감소시킨다 : 시작할 때는 빠르게, 나중에는 천천히 using 학습 스케쥴 함수 learning schedule which decides learning rate

n_ephochs = 50
t0, t1 = 5, 50 # 학습 스케줄 parameter

def learning_schedule(t):
    return t0 / (t + t1)

theta = np.random.randn(2, 1) # 무작위 초기화

for epoch in range(n_ephochs):
    for i in range(m):
        random_index = np.random.randint(m)
        xi = X_b[random_index:random_index+1]
        yi = y[random_index:random_index+1]
        gradients = 2 * xi.T.dot(xi.dot(theta) - yi)
        eta = learning_schedule(epoch * m + i)
        theta = theta - eta * gradients
        
# 한 반복에서 m 번 반복되고, 이 때 각 반복을 epoch 이라고 한다

theta


# 사이킷 런에서 선형 회귀를 사용하려면, 기본값으로 제곱 오차 비용 함수를 최적화하는 SGDRegressor 클래스 사용

from sklearn.linear_model import SGDRegressor

sgd_reg = SGDRegressor(max_iter=1000, tol=1e-3, penalty=None, eta0=0.1)
sgd_reg.fit(X, y.ravel())

sgd_reg.intercept_, sgd_reg.coef_


# 4.2.3 미니배치 경사 하강법
# 미니배치라 부르는 임의의 작은 샘플 세트에 대해 gradient 를 계산
# 미니배치를 어느 정도 크게 하면 SGD 보다 덜 불규칙 -> SGD 보다 최솟값에 더 가까이 도달 but 지역 최솟값에서 빠져나오기 더 힘듬

# 배치 경사 하강법은 최솟값에서 정확하게 멈추지만, 확률적 경사 하강법과 미니배치 경사 하강법은 최솟값 주변에서 맴돈다 
# 그러나, 적절한 학습 스케줄을 사용하면 최솟값 도달
